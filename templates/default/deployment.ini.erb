#
# **** This file is managed by chef. ****
#
################################################################################
################################################################################
# RhodeCode - Pylons environment configuration                                 #
#                                                                              # 
# The %(here)s variable will be replaced with the parent directory of this file#
################################################################################

[DEFAULT]
debug = false
pdebug = false
################################################################################
## Uncomment and replace with the address which should receive                ## 
## any error reports after application crash                                  ##
## Additionally those settings will be used by RhodeCode mailing system       ##
################################################################################
email_to = <%= node['rhodecode']['email']['to'] %>
error_email_from = <%= node['rhodecode']['email']['errfrom'] %>
app_email_from = <%= node['rhodecode']['email']['appfrom'] %>
#error_message =
email_prefix = [RhodeCode]

smtp_server = <%= node['rhodecode']['smtp']['server'] %>
<% if ! node['rhodecode']['smtp']['username'].nil? -%>
smtp_username = <%= node['rhodecode']['smtp']['username'] %>
smtp_password = <%= node['rhodecode']['smtp']['password'] %>
# Specify available auth parameters here (e.g. LOGIN PLAIN CRAM-MD5, etc.)
smtp_auth = <%= node['rhodecode']['smtp']['auth'] %>
<% end -%>
smtp_port = <%= node['rhodecode']['smtp']['port'] %>
smtp_use_tls = <%= node['rhodecode']['smtp']['use_tls'] %>
smtp_use_ssl = <%= node['rhodecode']['smtp']['use_ssl'] %>

[server:main]
## WAITRESS ##
use = egg:waitress#main
## number of worker threads
#threads = 2 
## MAX BODY SIZE 100GB
#max_request_body_size = 107374182400
## use poll instead of select, fixes fd limits, may not work on old
## windows systems.
##asyncore_use_poll = True

#nr of threads to spawn
threadpool_workers = 2
threadpool_spawn_if_under = 2

##max request before thread respawn
threadpool_max_requests = 10

##option to use threads of process
use_threadpool = true

use = egg:Paste#http
host = <%= node['rhodecode']['host'] %>
port = <%= @port_num %>

[app:main]
use = egg:rhodecode
full_stack = true
static_files = true
lang = en
cache_dir = %(here)s/data
index_dir = %(here)s/data/index
app_instance_uuid = {<%= node['rhodecode']['app_instance_uuid'] %>}
cut_off_limit = 256000
force_https = <%= node['rhodecode']['force']['https'] %>
commit_parse_limit = 50
use_gravatar = true
container_auth_enabled = false
proxypass_auth_enabled = false
default_encoding = utf8

## GUNICORN ##
#use = egg:gunicorn#main
## number of process workers. You must set `instance_id = *` when this option
## is set to more than one worker
#workers = 1
## process name
#proc_name = rhodecode
## type of worker class, one of sync, eventlet, gevent, tornado
## recommended for bigger setup is using of of other than sync one
#worker_class = sync
#max_requests = 5
## ammount of time a worker can handle request before it gets killed and
## restarted
#timeout = 3600

## UWSGI ##
## run with uwsgi --ini-paste-logged <inifile.ini>
#[uwsgi]
#socket = /tmp/uwsgi.sock
#master = true
#http = 127.0.0.1:5000

## overwrite schema of clone url
## available vars:
## scheme - http/https
## user - current user
## pass - password 
## netloc - network location
## path - usually repo_name

## set as deamon and redirect all output to file
#daemonize = ./uwsgi_rhodecode.log

## master process PID
#pidfile = ./uwsgi_rhodecode.pid

## stats server with workers statistics, use uwsgitop
## for monitoring, `uwsgitop 127.0.0.1:1717`
#stats = 127.0.0.1:1717
#memory-report = true

## log 5XX errors
#log-5xx = true

## Set the socket listen queue size.
#listen = 256

## Gracefully Reload workers after the specified amount of managed requests
## (avoid memory leaks).
#max-requests = 1000

## enable large buffers
#buffer-size=65535

## socket and http timeouts ##
#http-timeout=3600
#socket-timeout=3600

## Log requests slower than the specified number of milliseconds.
#log-slow = 10

## Exit if no app can be loaded.
#need-app = true

## Set lazy mode (load apps in workers instead of master).
#lazy = true

## scaling ##
## set cheaper algorithm to use, if not set default will be used
#cheaper-algo = spare

## minimum number of workers to keep at all times
#cheaper = 1

## number of workers to spawn at startup
#cheaper-initial = 1

## maximum number of workers that can be spawned
#workers = 4

## how many workers should be spawned at a time
#cheaper-step = 1



#clone_uri = {scheme}://{user}{pass}{netloc}{path}
clone_uri = {scheme}://{user}{pass}<%=node['rhodecode']['hostname']%>{path}

## issue tracking mapping for commits messages
## comment out issue_pat, issue_server, issue_prefix to enable

## pattern to get the issues from commit messages
## default one used here is #<numbers> with a regex passive group for `#`
## {id} will be all groups matched from this pattern

issue_pat = <%= node['rhodecode']['issue']['pattern'] %>

## server url to the issue, each {id} will be replaced with match
## fetched from the regex and {repo} is replaced with repository name

issue_server_link = <%= node['rhodecode']['issue']['server'] %>

## prefix to add to link to indicate it's an url
## #314 will be replaced by <issue_prefix><id>

issue_prefix = <%= node['rhodecode']['issue']['prefix'] %>

## instance-id prefix
## a prefix key for this instance used for cache invalidation when running 
## multiple instances of rhodecode, make sure it's globally unique for 
## all running rhodecode instances. Leave empty if you don't use it
instance_id = <%= @instance_num %>

## alternative return HTTP header for failed authentication. Default HTTP
## response is 401 HTTPUnauthorized. Currently HG clients have troubles with 
## handling that. Set this variable to 403 to return HTTPForbidden
auth_ret_code = <%= node['rhodecode']['authError'] %>

## locking return code. When repository is locked return this HTTP code. 2XX
## codes don't break the transactions while 4XX codes do
lock_ret_code = 423

## allows to change the repository location in settings page
allow_repo_location_change = True

## allows to setup custom hooks in settings page
allow_custom_hooks_settings = True

## issue tracker for RhodeCode (leave blank to disable, absent for default)
#bugtracker = http://bitbucket.org/marcinkuzminski/rhodecode/issues

## white list of API enabled controllers. This allows to add list of
## controllers to which access will be enabled by api_key. eg: to enable
## api access to raw_files put `FilesController:raw`, to enable access to patches
## add `ChangesetController:changeset_patch`. This list should be "," separated
## Syntax is <ControllerClass>:<function>. Check debug logs for generated names
## Recommended settings bellow are commented out:
api_access_controllers_whitelist =
#    ChangesetController:changeset_patch,
#    ChangesetController:changeset_raw,
#    FilesController:raw,
#    FilesController:archivefile

## gist URL alias, used to create nicer urls for gist. This should be an
## url that does rewrites to _admin/gists/<gistid>.
## example: http://gist.rhodecode.org/{gistid}. Empty means use the internal
## RhodeCode url, ie. http[s]://rhodecode.server/_admin/gists/<gistid>
gist_alias_url =


## use gravatar service to display avatars
use_gravatar = true

####################################
###        CELERY CONFIG        ####
####################################
use_celery = true
broker.host = <%= node['celery']['host'] %>
broker.vhost = <%= node['celery']['vhost'] %>
broker.port = <%= node['celery']['port'] %>
broker.user = <%= node['celery']['user'] %>
broker.password = <%= node['celery']['passwd'] %>

celery.imports = rhodecode.lib.celerylib.tasks

celery.result.backend = amqp
celery.result.dburi = amqp://
celery.result.serialier = json

#celery.send.task.error.emails = true
#celery.amqp.task.result.expires = 18000

celeryd.concurrency = 2
#celeryd.log.file = celeryd.log
celeryd.log.level = debug
celeryd.max.tasks.per.child = 1

#tasks will never be sent to the queue, but executed locally instead.
celery.always.eager = false

####################################
###         BEAKER CACHE        ####
####################################
beaker.cache.data_dir=%(here)s/data/cache/data
beaker.cache.lock_dir=%(here)s/data/cache/lock

beaker.cache.regions=super_short_term,short_term,long_term,sql_cache_short,sql_cache_med,sql_cache_long

beaker.cache.super_short_term.type=memory
beaker.cache.super_short_term.expire=10
beaker.cache.super_short_term.key_length = 256

beaker.cache.short_term.type=memory
beaker.cache.short_term.expire=60
beaker.cache.short_term.key_length = 256

beaker.cache.long_term.type=memory
beaker.cache.long_term.expire=36000
beaker.cache.long_term.key_length = 256

beaker.cache.sql_cache_short.type=memory
beaker.cache.sql_cache_short.expire=10
beaker.cache.sql_cache_short.key_length = 256

beaker.cache.sql_cache_med.type=memory
beaker.cache.sql_cache_med.expire=360
beaker.cache.sql_cache_med.key_length = 256

beaker.cache.sql_cache_long.type=file
beaker.cache.sql_cache_long.expire=3600
beaker.cache.sql_cache_long.key_length = 256

####################################
###       BEAKER SESSION        ####
####################################
## Type of storage used for the session, current types are 
## dbm, file, memcached, database, and memory. 
## The storage uses the Container API 
## that is also used by the cache system.

## db session example

beaker.session.type = ext:database
beaker.session.sa.url = postgresql://postgres:<%= node['rhodecode']['db']['user'] %>:<%= node['rhodecode']['db']['passwd'] %>@<%= node['rhodecode']['db']['host'] %>/<%= node['rhodecode']['db']['name'] %>
beaker.session.table_name = db_session 

## encrypted cookie session, good for many instances
beaker.session.type = cookie

#beaker.session.type = file
beaker.session.key = rhodecode
# secure cookie requires AES python libraries
beaker.session.encrypt_key = <%= node['rhodecode']['beaker']['key'] %>
beaker.session.validate_key = <%= node['rhodecode']['beaker']['key'] %>
beaker.session.timeout = 36000
beaker.session.httponly = true

## uncomment for https secure cookie
beaker.session.secure = false

##auto save the session to not to use .save()
beaker.session.auto = False

##true exire at browser close
#beaker.session.cookie_expires = 3600

############################
## ERROR HANDLING SYSTEMS ##
############################

####################
### [errormator] ###
####################

## Errormator is tailored to work with RhodeCode, see
## http://errormator.com for details how to obtain an account
## you must install python package `errormator_client` to make it work

## errormator enabled
errormator = false

errormator.server_url = https://api.errormator.com
errormator.api_key = YOUR_API_KEY

## TWEAK AMOUNT OF INFO SENT HERE

## enables 404 error logging (default False)
errormator.report_404 = false

## time in seconds after request is considered being slow (default 1)
errormator.slow_request_time = 1

## record slow requests in application
## (needs to be enabled for slow datastore recording and time tracking)
errormator.slow_requests = true

## enable hooking to application loggers
# errormator.logging = true

## minimum log level for log capture
# errormator.logging.level = WARNING

## send logs only from erroneous/slow requests
## (saves API quota for intensive logging)
errormator.logging_on_error = false

## list of additonal keywords that should be grabbed from environ object
## can be string with comma separated list of words in lowercase
## (by default client will always send following info:
## 'REMOTE_USER', 'REMOTE_ADDR', 'SERVER_NAME', 'CONTENT_TYPE' + all keys that
## start with HTTP* this list be extended with additional keywords here
errormator.environ_keys_whitelist =


## list of keywords that should be blanked from request object
## can be string with comma separated list of words in lowercase
## (by default client will always blank keys that contain following words
## 'password', 'passwd', 'pwd', 'auth_tkt', 'secret', 'csrf'
## this list be extended with additional keywords set here
errormator.request_keys_blacklist =


## list of namespaces that should be ignores when gathering log entries
## can be string with comma separated list of namespaces
## (by default the client ignores own entries: errormator_client.client)
errormator.log_namespace_blacklist =


################
### [sentry] ###
################

## sentry is a alternative open source error aggregator
## you must install python packages `sentry` and `raven` to enable

sentry.dsn = YOUR_DNS
sentry.servers =
sentry.name =
sentry.key =
sentry.public_key =
sentry.secret_key =
sentry.project =
sentry.site =
sentry.include_paths =
sentry.exclude_paths =


################################################################################
## WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*  ##
## Debug mode will enable the interactive debugging tool, allowing ANYONE to  ##
## execute malicious code after an exception is raised.                       ##
################################################################################
set debug = false

##################################
###       LOGVIEW CONFIG       ###
##################################
logview.sqlalchemy = #faa
logview.pylons.templating = #bfb
logview.pylons.util = #eee

#########################################################
### DB CONFIGS - EACH DB WILL HAVE IT'S OWN CONFIG    ###
#########################################################

# SQLITE [default]
#sqlalchemy.db1.url = sqlite:///%(here)s/rhodecode.db
 
# POSTGRESQL
sqlalchemy.db1.url = postgresql://<%= node['rhodecode']['db']['user'] %>:<%= node['rhodecode']['db']['passwd'] %>@<%= node['rhodecode']['db']['host'] %>/<%= node['rhodecode']['db']['name'] %>

# MySQL
# sqlalchemy.db1.url = mysql://user:pass@localhost/rhodecode

# see sqlalchemy docs for others

sqlalchemy.db1.echo = false
sqlalchemy.db1.pool_recycle = 3600
sqlalchemy.db1.convert_unicode = true

################################
### LOGGING CONFIGURATION   ####
################################
[loggers]
keys = root, routes, rhodecode, sqlalchemy, beaker, templates, whoosh_indexer

[handlers]
keys = console, console_sql

[formatters]
keys = generic, color_formatter, color_formatter_sql

#############
## LOGGERS ##
#############
[logger_root]
level = NOTSET
handlers = console

[logger_routes]
level = DEBUG
handlers = 
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.
propagate = 1

[logger_beaker]
level = DEBUG
handlers = 
qualname = beaker.container
propagate = 1

[logger_templates]
level = INFO
handlers = 
qualname = pylons.templating
propagate = 1

[logger_rhodecode]
level = DEBUG
handlers = 
qualname = rhodecode
propagate = 1

[logger_sqlalchemy]
level = INFO
handlers = console_sql
qualname = sqlalchemy.engine
propagate = 0

[logger_whoosh_indexer]
level = DEBUG
handlers = 
qualname = whoosh_indexer
propagate = 1

##############
## HANDLERS ##
##############

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = INFO
formatter = generic

[handler_console_sql]
class = StreamHandler
args = (sys.stderr,)
level = WARN
formatter = generic

################
## FORMATTERS ##
################

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

[formatter_color_formatter]
class=rhodecode.lib.colored_formatter.ColorFormatter
format= %(asctime)s.%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

[formatter_color_formatter_sql]
class=rhodecode.lib.colored_formatter.ColorFormatterSql
format= %(asctime)s.%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S
